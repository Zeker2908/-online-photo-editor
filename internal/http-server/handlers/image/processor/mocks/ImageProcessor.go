// Code generated by mockery v2.49.1. DO NOT EDIT.

package mocks

import (
	image "image"
	multipart "mime/multipart"

	mock "github.com/stretchr/testify/mock"
)

// ImageProcessor is an autogenerated mock type for the ImageProcessor type
type ImageProcessor struct {
	mock.Mock
}

// DeleteImage provides a mock function with given fields: imgName
func (_m *ImageProcessor) DeleteImage(imgName string) error {
	ret := _m.Called(imgName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteImage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(imgName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindImage provides a mock function with given fields: imgName
func (_m *ImageProcessor) FindImage(imgName string) (string, error) {
	ret := _m.Called(imgName)

	if len(ret) == 0 {
		panic("no return value specified for FindImage")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(imgName)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(imgName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(imgName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateName provides a mock function with given fields: prefix, fileExt
func (_m *ImageProcessor) GenerateName(prefix string, fileExt string) (string, error) {
	ret := _m.Called(prefix, fileExt)

	if len(ret) == 0 {
		panic("no return value specified for GenerateName")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(prefix, fileExt)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(prefix, fileExt)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(prefix, fileExt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadImage provides a mock function with given fields: imgName
func (_m *ImageProcessor) LoadImage(imgName string) (image.Image, error) {
	ret := _m.Called(imgName)

	if len(ret) == 0 {
		panic("no return value specified for LoadImage")
	}

	var r0 image.Image
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (image.Image, error)); ok {
		return rf(imgName)
	}
	if rf, ok := ret.Get(0).(func(string) image.Image); ok {
		r0 = rf(imgName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(image.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(imgName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveImage provides a mock function with given fields: inputImg, imgName
func (_m *ImageProcessor) SaveImage(inputImg image.Image, imgName string) (string, error) {
	ret := _m.Called(inputImg, imgName)

	if len(ret) == 0 {
		panic("no return value specified for SaveImage")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(image.Image, string) (string, error)); ok {
		return rf(inputImg, imgName)
	}
	if rf, ok := ret.Get(0).(func(image.Image, string) string); ok {
		r0 = rf(inputImg, imgName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(image.Image, string) error); ok {
		r1 = rf(inputImg, imgName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadImage provides a mock function with given fields: file, handler
func (_m *ImageProcessor) UploadImage(file multipart.File, handler *multipart.FileHeader) (string, error) {
	ret := _m.Called(file, handler)

	if len(ret) == 0 {
		panic("no return value specified for UploadImage")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(multipart.File, *multipart.FileHeader) (string, error)); ok {
		return rf(file, handler)
	}
	if rf, ok := ret.Get(0).(func(multipart.File, *multipart.FileHeader) string); ok {
		r0 = rf(file, handler)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(multipart.File, *multipart.FileHeader) error); ok {
		r1 = rf(file, handler)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewImageProcessor creates a new instance of ImageProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewImageProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *ImageProcessor {
	mock := &ImageProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
